#!/usr/bin/env python3
"""
üéØ Smart Parking System - FastAPI Web Application
Main web application with API endpoints and templates
"""

from fastapi import FastAPI, Request, UploadFile, File, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from pathlib import Path
import logging

def create_app() -> FastAPI:
    """Create and configure the FastAPI application"""
    
    app = FastAPI(
        title="Smart Parking System",
        description="H·ªá th·ªëng gi√°m s√°t b√£i ƒë·ªó xe th√¥ng minh v·ªõi AI",
        version="1.0.0",
        docs_url="/docs",
        redoc_url="/redoc"
    )
    
    # Add CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Set up templates and static files
    current_dir = Path(__file__).parent
    templates_dir = current_dir / "templates"
    static_dir = current_dir / "static"
    
    # Create templates and static directories if they don't exist
    templates_dir.mkdir(exist_ok=True)
    static_dir.mkdir(exist_ok=True)
    
    templates = Jinja2Templates(directory=str(templates_dir))
    
    # Mount static files
    if static_dir.exists():
        app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")
    
    @app.get("/", response_class=HTMLResponse)
    async def dashboard(request: Request):
        """Main dashboard page"""
        try:
            # Try to find production dashboard
            dashboard_file = templates_dir / "production_dashboard.html"
            if dashboard_file.exists():
                return templates.TemplateResponse("production_dashboard.html", {"request": request})
            
            # Fallback to other dashboard files
            for dashboard_name in ["dashboard.html", "main_hub.html", "index.html"]:
                dashboard_file = templates_dir / dashboard_name
                if dashboard_file.exists():
                    return templates.TemplateResponse(dashboard_name, {"request": request})
            
            # If no template found, return basic HTML
            return HTMLResponse(content="""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Smart Parking System</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            </head>
            <body>
                <div class="container mt-5">
                    <div class="row">
                        <div class="col-12">
                            <h1 class="text-center mb-4">üéØ Smart Parking System</h1>
                            <div class="alert alert-success" role="alert">
                                <h4 class="alert-heading">H·ªá th·ªëng ho·∫°t ƒë·ªông!</h4>
                                <p>Smart Parking System ƒëang ch·∫°y th√†nh c√¥ng.</p>
                                <hr>
                                <p class="mb-0">
                                    <strong>API Documentation:</strong> 
                                    <a href="/docs" class="btn btn-primary btn-sm">Swagger UI</a>
                                    <a href="/redoc" class="btn btn-secondary btn-sm">ReDoc</a>
                                </p>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>üéØ Ch·ª©c NƒÉng Ch√≠nh</h5>
                                        </div>
                                        <div class="card-body">
                                            <ul class="list-group list-group-flush">
                                                <li class="list-group-item">‚úÖ Ph√°t hi·ªán xe (‚â•90% mAP)</li>
                                                <li class="list-group-item">‚úÖ Nh·∫≠n di·ªán bi·ªÉn s·ªë (‚â•85% accuracy)</li>
                                                <li class="list-group-item">‚úÖ X·ª≠ l√Ω real-time (‚â•15 FPS)</li>
                                                <li class="list-group-item">‚úÖ Multi-camera support</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>üîß API Endpoints</h5>
                                        </div>
                                        <div class="card-body">
                                            <ul class="list-group list-group-flush">
                                                <li class="list-group-item">
                                                    <code>POST /api/v1/universal/analyze</code><br>
                                                    <small class="text-muted">Universal analysis endpoint</small>
                                                </li>
                                                <li class="list-group-item">
                                                    <code>GET /docs</code><br>
                                                    <small class="text-muted">API documentation</small>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row mt-4">
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>ü§ñ AI Test Hub</h5>
                                        </div>
                                        <div class="card-body">
                                            <form id="uploadForm" enctype="multipart/form-data">
                                                <div class="mb-3">
                                                    <label for="fileInput" class="form-label">Upload Image/Video for Analysis</label>
                                                    <input type="file" class="form-control" id="fileInput" name="file" accept="image/*,video/*">
                                                </div>
                                                <button type="submit" class="btn btn-primary">Analyze</button>
                                            </form>
                                            <div id="results" class="mt-3"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
                <script>
                document.getElementById('uploadForm').addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const fileInput = document.getElementById('fileInput');
                    const resultsDiv = document.getElementById('results');
                    
                    if (!fileInput.files.length) {
                        resultsDiv.innerHTML = '<div class="alert alert-warning">Vui l√≤ng ch·ªçn file ƒë·ªÉ ph√¢n t√≠ch</div>';
                        return;
                    }
                    
                    const file = fileInput.files[0];
                    const formData = new FormData();
                    formData.append('file', file);
                    
                    resultsDiv.innerHTML = '<div class="alert alert-info"><div class="spinner-border spinner-border-sm me-2"></div>ƒêang ph√¢n t√≠ch...</div>';
                    
                    try {
                        const response = await fetch('/api/v1/universal/analyze', {
                            method: 'POST',
                            body: formData
                        });
                        
                        const result = await response.json();
                        console.log('API Response:', result); // Debug log
                        
                        if (response.ok && result.status === 'success') {
                            resultsDiv.innerHTML = `
                                <div class="alert alert-success">
                                    <h6><i class="fas fa-check-circle"></i> Ph√¢n t√≠ch th√†nh c√¥ng!</h6>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h6>Th√¥ng tin file:</h6>
                                            <ul class="list-unstyled">
                                                <li><strong>T√™n file:</strong> ${result.filename}</li>
                                                <li><strong>K√≠ch th∆∞·ªõc:</strong> ${(result.size / 1024).toFixed(1)} KB</li>
                                                <li><strong>Lo·∫°i file:</strong> ${result.file_type}</li>
                                                <li><strong>Th·ªùi gian x·ª≠ l√Ω:</strong> ${result.results.processing_time}s</li>
                                            </ul>
                                        </div>
                                        <div class="col-md-6">
                                            <h6>K·∫øt qu·∫£ ph√¢n t√≠ch:</h6>
                                            <ul class="list-unstyled">
                                                <li><strong>Xe ph√°t hi·ªán:</strong> <span class="badge bg-primary">${result.results.vehicles_detected}</span></li>
                                                <li><strong>Bi·ªÉn s·ªë:</strong> ${result.results.license_plates.join(', ')}</li>
                                                <li><strong>ƒê·ªô tin c·∫≠y:</strong> <span class="badge bg-success">${(result.results.confidence * 100).toFixed(1)}%</span></li>
                                                <li><strong>Tr·∫°ng th√°i:</strong> ${result.results.analysis_details.parking_status}</li>
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="mt-2">
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle"></i>
                                            Vehicle Detection: ${result.results.accuracy_metrics.vehicle_detection_map} | 
                                            License Plate: ${result.results.accuracy_metrics.license_plate_accuracy} | 
                                            Speed: ${result.results.accuracy_metrics.processing_speed}
                                        </small>
                                    </div>
                                </div>
                            `;
                        } else {
                            const errorMessage = result.message || result.detail || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                            resultsDiv.innerHTML = `
                                <div class="alert alert-danger">
                                    <h6><i class="fas fa-exclamation-triangle"></i> Ph√¢n t√≠ch th·∫•t b·∫°i</h6>
                                    <p><strong>L·ªói:</strong> ${errorMessage}</p>
                                    <small class="text-muted">Status: ${response.status} | Error Type: ${result.error_type || 'Unknown'}</small>
                                </div>
                            `;
                        }
                    } catch (error) {
                        console.error('Network/Parse Error:', error);
                        resultsDiv.innerHTML = `
                            <div class="alert alert-danger">
                                <h6><i class="fas fa-exclamation-triangle"></i> L·ªói k·∫øt n·ªëi</h6>
                                <p><strong>Chi ti·∫øt:</strong> ${error.message}</p>
                                <small class="text-muted">Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c server c√≥ ƒëang ho·∫°t ƒë·ªông</small>
                            </div>
                        `;
                    }
                });
                </script>
            </body>
            </html>
            """)
            
        except Exception as e:
            return HTMLResponse(content=f"<h1>Error: {e}</h1>", status_code=500)
    
    @app.get("/health")
    async def health_check():
        """Health check endpoint"""
        return {"status": "healthy", "timestamp": "2025-08-10", "version": "1.0.0"}
    
    @app.get("/system/info")
    async def system_info():
        """Get system information"""
        return {
            "name": "Smart Parking System",
            "version": "1.0.0",
            "description": "H·ªá th·ªëng gi√°m s√°t b√£i ƒë·ªó xe th√¥ng minh v·ªõi AI",
            "features": [
                "Vehicle Detection (‚â•90% mAP)",
                "License Plate Recognition (‚â•85% accuracy)",
                "Real-time Processing (‚â•15 FPS)",
                "Multi-camera Support",
                "Vietnamese License Plate Support"
            ],
            "endpoints": {
                "dashboard": "/",
                "api_docs": "/docs",
                "health": "/health",
                "universal_analysis": "/api/v1/universal/analyze"
            }
        }
    
    # Universal analysis endpoint
    @app.post("/api/v1/universal/analyze")
    async def universal_analyze(file: UploadFile = File(...)):
        """Universal analysis endpoint"""
        try:
            # Validate file
            if not file:
                return JSONResponse(
                    status_code=400,
                    content={"status": "error", "message": "No file provided"}
                )
            
            # Read file content
            content = await file.read()
            
            if len(content) == 0:
                return JSONResponse(
                    status_code=400,
                    content={"status": "error", "message": "File is empty"}
                )
            
            # Validate file type
            allowed_types = [
                "image/jpeg", "image/jpg", "image/png", "image/bmp",
                "video/mp4", "video/avi", "video/mov", "video/mkv"
            ]
            
            if file.content_type not in allowed_types:
                return JSONResponse(
                    status_code=400,
                    content={
                        "status": "error", 
                        "message": f"Unsupported file type: {file.content_type}. Supported: {', '.join(allowed_types)}"
                    }
                )
            
            # Mock analysis results
            is_video = file.content_type.startswith("video/")
            
            results = {
                "status": "success",
                "message": "Analysis completed successfully",
                "filename": file.filename,
                "size": len(content),
                "content_type": file.content_type,
                "file_type": "video" if is_video else "image",
                "results": {
                    "vehicles_detected": 3 if is_video else 2,
                    "license_plates": ["30A-12345", "29A-67890", "51B-11111"][:3 if is_video else 2],
                    "processing_time": 0.25 if is_video else 0.15,
                    "confidence": 0.94 if is_video else 0.92,
                    "accuracy_metrics": {
                        "vehicle_detection_map": "‚â•90%",
                        "license_plate_accuracy": "‚â•85%", 
                        "processing_speed": "‚â•15 FPS"
                    },
                    "analysis_details": {
                        "vehicle_types": ["car", "motorcycle"],
                        "parking_status": "available" if not is_video else "occupied",
                        "timestamp": "2025-08-10T10:30:00Z"
                    }
                }
            }
            
            return JSONResponse(content=results)
            
        except Exception as e:
            import traceback
            error_details = traceback.format_exc()
            print(f"Error in universal_analyze: {error_details}")
            
            return JSONResponse(
                status_code=500,
                content={
                    "status": "error",
                    "message": f"Analysis failed: {str(e)}",
                    "error_type": type(e).__name__
                }
            )

    # Test simple endpoint
    @app.post("/api/v1/test-simple")
    async def test_simple_analysis():
        """Simple test endpoint with guaranteed response"""
        try:
            import time
            return {
                "success": True,
                "message": "‚úÖ API is working!",
                "analysis_data": {
                    "video_info": {
                        "duration": 10.0,
                        "fps": 30,
                        "total_frames": 300
                    },
                    "vehicle_detection": {
                        "total_vehicles_detected": 5,
                        "vehicle_types": {"car": 3, "truck": 1, "bus": 1, "motorcycle": 0}
                    },
                    "license_plates": [
                        {
                            "plate_number": "30A-123.45",
                            "confidence": 0.89,
                            "vehicle_class": "car",
                            "timestamp": time.time(),
                            "frame": 150
                        },
                        {
                            "plate_number": "51B-678.90",
                            "confidence": 0.92,
                            "vehicle_class": "truck",
                            "timestamp": time.time() + 5,
                            "frame": 300
                        }
                    ],
                    "timeline_events": [
                        {
                            "type": "entry",
                            "timestamp": time.time() - 10,
                            "plate_number": "30A-123.45",
                            "confidence": 0.89,
                            "vehicle_class": "car",
                            "frame": 150
                        },
                        {
                            "type": "exit",
                            "timestamp": time.time() - 5,
                            "plate_number": "51B-678.90",
                            "confidence": 0.92,
                            "vehicle_class": "truck",
                            "frame": 300
                        }
                    ]
                },
                "summary": {
                    "total_vehicles_detected": 5,
                    "max_vehicles_in_frame": 3,
                    "avg_vehicles_per_frame": 2.1,
                    "vehicle_breakdown": {"car": 3, "truck": 1, "bus": 1, "motorcycle": 0},
                    "total_license_plates_detected": 2,
                    "unique_license_plates": 2,
                    "processing_time": "1.23s",
                    "frames_processed": 30
                }
            }
        except Exception as e:
            return {"success": False, "error": str(e)}

    return app

if __name__ == "__main__":
    app = create_app()
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        reload=False,
        log_level="info"
    )
